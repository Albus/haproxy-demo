global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/demo.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
	ssl-default-bind-options no-sslv3

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
  timeout connect 5000
  timeout client  50000
  timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend foo_ft_https
	log	global
  mode tcp
  option tcplog
  bind 0.0.0.0:443
  bind 0.0.0.0:80

  # http://stackoverflow.com/questions/13227544/haproxy-redirecting-http-to-https-ssl
  #acl has_ssl ssl_fc
  #acl is_local hdr(Host) -m end insecure.daplie.com
  #redirect scheme https if !has_ssl !is_local
  # redirect scheme https code 301 if { hdr(Host) -i www.mydomain.com } !{ ssl_fc }
  # TODO use special meta redirect backend (to break insecure API usage)
  redirect scheme https code 301 if !{ ssl_fc }

  # OpenVPN-over-HTTPS
  use_backend foo_proxy_rvpn if { req.ssl_sni -i rvpn.daplie.com }

  # Dynamically Generated List of Domains
  # TODO sort domains by length and and use `-m end .{{domain}}`
{{#domains}}  use_backend foo_bk_{{device}} if { req.ssl_sni -i {{domain}} }
{{/domains}}

  default_backend foo_bk_local

# OVPN-over-HTTPS
frontend foo_ft_rvpn
	mode tcp
  option tcplog
  # the demo certs have a root instead of an intermediate in the chain.pem
  #bind 127.0.0.1:11443 ssl crt /etc/letsencrypt/live/pnet.daplie.com/cert.pem crt /etc/letsencrypt/live/pnet.daplie.com/chain.pem crt /etc/letsencrypt/live/pnet.daplie.com/privkey.pem accept-proxy
  bind 127.0.0.1:11443 ssl crt /etc/letsencrypt/live/rvpn.daplie.com/cert.pem crt /etc/letsencrypt/live/rvpn.daplie.com/privkey.pem accept-proxy

  use_backend foo_bk_ovpn

backend foo_proxy_rvpn
  mode tcp
  option tcplog

  #timeout server 2h
  server foo_srv_ovpn 127.0.0.1:11443 send-proxy

# HTTPS SNI
backend foo_bk_local
	log	global
  mode http
  option httplog

  server foo_srv_local localhost:4080

# Dynamically Generated List of Devices
{{#devices}}backend foo_bk_{{device}}
	log	global
  mode tcp
  option tcplog

  server foo_srv_{{device}} {{ip}}:443

{{/devices}}
